#version 450
layout(local_size_x = 16, local_size_y = 9, local_size_z = 4) in;

#include "../EruptionEngine.ini"

struct PointLight
{
    vec3 position;
    float radius;
    vec3 color;
	int shadowmapIndex;
	float shadowSoftness;
    int pcfSampleRate; 
    float bias;
};
struct SpotLight
{
    vec3 position;
    float innerCutoff;
    vec3 direction;
    float outerCutoff;
    vec3 color;
    float range;
    mat4 projView;
    int shadowmapIndex;
    float shadowSoftness;
    int pcfSampleRate; 
    float bias;
};
struct DirLight
{
    vec3 direction;
    int shadowmapIndex;
    vec3 color;
    float shadowSoftness;
    int pcfSampleRate;
    float bias;
    
    mat4 projView[SHADOW_CASCADES];
};

struct AABB 
{
    vec4 min;
    vec4 max;
};

layout (std430, binding = 0) buffer AABBClustersBuffer
{
    AABB clusters[];
};

struct LightGrid
{
    uint offset;
    uint count;
};

layout (std430, binding = 1) buffer LightGrids 
{
    LightGrid lightGrids[];
};

layout (std430, binding = 2) buffer LightIndexSSBO
{
    uint globalLightIndexList[];
};

layout (std430, binding = 3) buffer GlobalindexCountSSBO
{
    uint globalIndexCount;
};

layout(binding = 4) uniform UBO 
{
    PointLight pLights[MAX_POINT_LIGHTS];
    SpotLight  sLights[MAX_SPOT_LIGHTS];
    DirLight   dLights[MAX_DIR_LIGHTS];

    uint activePointLights;
    uint activeSpotLights;
    uint activeDirLights;
    float dummy0;

    vec3 ambient;
    float dummy1;

    vec4 cascadeSplitDistances[SHADOW_CASCADES];

    vec4 cascadeRatios[SHADOW_CASCADES];

    vec3 viewPos;
    int debugMode;

    uvec4 tileSizes;

    float scale;
    float bias;

} lightsBuffer;

layout(push_constant) uniform CameraPushConstant
{
    mat4 view;
} camera;

shared PointLight sharedPointLights[16*9*4];

float SqDistPointAABB(vec3 point, uint tileID)
{
    float sqDist = 0.0;

    AABB currentCell = clusters[tileID];

    for(int i = 0; i < 3; ++i)
    {
        float v = point[i];

        float min = currentCell.min[i];
        float max = currentCell.max[i];

        float sqDistMin = min - v;
        float sqDistMax = v - max;

        if(v < min)
            sqDist += sqDistMin * sqDistMin;
        
        if(v > max)
            sqDist += sqDistMax * sqDistMax;
    }

    return sqDist;
}

bool SphereAABBIntersection(uint light, uint tileID) 
{
    float radius = sharedPointLights[light].radius;

    vec3 viewSpacePos = vec3(camera.view * vec4(sharedPointLights[light].position, 1.0));

    float sqDistance = SqDistPointAABB(viewSpacePos, tileID);

    return sqDistance <= (radius * radius);
}

void main()
{
    globalIndexCount = 0;
    uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
    uint lightCount  = lightsBuffer.activePointLights;
    uint numBatches  = (lightCount + threadCount - 1) / threadCount;

    uint tileIndex = gl_LocalInvocationIndex + gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z * gl_WorkGroupID.z;
    
    uint visibleLightCount = 0;
    uint visibleLightIndices[100];

    for(uint batch = 0; batch < numBatches; ++batch)
    {
        uint lightIndex = batch * threadCount + gl_LocalInvocationIndex;

        //Prevent overflow by clamping to last light which is always null
        lightIndex = min(lightIndex, lightCount);

        //Populating shared light array
        sharedPointLights[gl_LocalInvocationIndex] = lightsBuffer.pLights[lightIndex];
        barrier();

        //Iterating within the current batch of lights
        for(uint light = 0; light < threadCount; ++light)
        {
            if(sharedPointLights[light].color != vec3(0.0) && sharedPointLights[light].radius > 0)
            {
                if(SphereAABBIntersection(light, tileIndex))
                {
                    visibleLightIndices[visibleLightCount] = batch * threadCount + light;
                    visibleLightCount += 1;
                }
            }
        }
    }

    //We want all thread groups to have completed the light tests before continuing
    barrier();

    uint offset = atomicAdd(globalIndexCount, visibleLightCount);

    for(uint i = 0; i < visibleLightCount; ++i)
        globalLightIndexList[offset + i] = visibleLightIndices[i];

    lightGrids[tileIndex].offset = offset;
    lightGrids[tileIndex].count = visibleLightCount;
}